diff --git a/Modules/CMakeDetermineCCompiler.cmake b/Modules/CMakeDetermineCCompiler.cmake
index 73b6ceec77..30925ede05 100644
--- a/Modules/CMakeDetermineCCompiler.cmake
+++ b/Modules/CMakeDetermineCCompiler.cmake
@@ -93,7 +93,13 @@ else()
     )
 endif()
 if(CMAKE_C_COMPILER_TARGET)
-  set(CMAKE_C_COMPILER_ID_TEST_FLAGS_FIRST "-c --target=${CMAKE_C_COMPILER_TARGET}")
+  if(CMAKE_SYSTEM_NAME MATCHES "OS390")
+    # z/OS object files sometimes don't have continuous string literals, therefore
+    # leads to some compiler info not being correctly parsed, so we should not use -c.
+    set(CMAKE_C_COMPILER_ID_TEST_FLAGS_FIRST "--target=${CMAKE_C_COMPILER_TARGET}")
+  else()
+    set(CMAKE_C_COMPILER_ID_TEST_FLAGS_FIRST "-c --target=${CMAKE_C_COMPILER_TARGET}")
+  endif()
 endif()
 # Build a small source file to identify the compiler.
 if(NOT CMAKE_C_COMPILER_ID_RUN)
@@ -183,7 +189,8 @@ if (NOT _CMAKE_TOOLCHAIN_PREFIX)
 
     # if "llvm-" is part of the prefix, remove it, since llvm doesn't have its own binutils
     # but uses the regular ar, objcopy, etc. (instead of llvm-objcopy etc.)
-    if ("${_CMAKE_TOOLCHAIN_PREFIX}" MATCHES "(.+-)?llvm-$")
+    # remove "ibm-" prefix for the same reason above.
+    if ("${_CMAKE_TOOLCHAIN_PREFIX}" MATCHES "(.+-)?(llvm|ibm)-$")
       set(_CMAKE_TOOLCHAIN_PREFIX ${CMAKE_MATCH_1})
     endif ()
   elseif(CMAKE_C_COMPILER_ID MATCHES "TI")
diff --git a/Modules/CMakeDetermineCXXCompiler.cmake b/Modules/CMakeDetermineCXXCompiler.cmake
index 891ba6e759..c451d4031a 100644
--- a/Modules/CMakeDetermineCXXCompiler.cmake
+++ b/Modules/CMakeDetermineCXXCompiler.cmake
@@ -95,7 +95,13 @@ else()
 endif()
 
 if(CMAKE_CXX_COMPILER_TARGET)
-  set(CMAKE_CXX_COMPILER_ID_TEST_FLAGS_FIRST "-c --target=${CMAKE_CXX_COMPILER_TARGET}")
+  if(CMAKE_SYSTEM_NAME MATCHES "OS390")
+    # z/OS object files sometimes don't have continuous string literals, therefore
+    # leads to some compiler info not being correctly parsed, so we should not use -c.
+    set(CMAKE_C_COMPILER_ID_TEST_FLAGS_FIRST "--target=${CMAKE_C_COMPILER_TARGET}")
+  else()
+    set(CMAKE_C_COMPILER_ID_TEST_FLAGS_FIRST "-c --target=${CMAKE_C_COMPILER_TARGET}")
+  endif()
 endif()
 
 # Build a small source file to identify the compiler.
@@ -188,7 +194,8 @@ if (NOT _CMAKE_TOOLCHAIN_PREFIX)
 
     # if "llvm-" is part of the prefix, remove it, since llvm doesn't have its own binutils
     # but uses the regular ar, objcopy, etc. (instead of llvm-objcopy etc.)
-    if ("${_CMAKE_TOOLCHAIN_PREFIX}" MATCHES "(.+-)?llvm-$")
+    # remove "ibm-" prefix for the same reason above.
+    if ("${_CMAKE_TOOLCHAIN_PREFIX}" MATCHES "(.+-)?(llvm|ibm)-$")
       set(_CMAKE_TOOLCHAIN_PREFIX ${CMAKE_MATCH_1})
     endif ()
   elseif(CMAKE_CXX_COMPILER_ID MATCHES "TI")
diff --git a/Modules/CMakeDetermineCompilerABI.cmake b/Modules/CMakeDetermineCompilerABI.cmake
index 4a75e25a92..8ca073d81f 100644
--- a/Modules/CMakeDetermineCompilerABI.cmake
+++ b/Modules/CMakeDetermineCompilerABI.cmake
@@ -50,6 +50,15 @@ function(CMAKE_DETERMINE_COMPILER_ABI lang src)
     list(JOIN LINK_OPTIONS " " LINK_OPTIONS)
     list(APPEND CMAKE_FLAGS "-DEXE_LINKER_FLAGS=${LINK_OPTIONS}")
 
+    # Add Flag for z/OS compilers for ascii encoding of string literals.
+    if(CMAKE_SYSTEM_NAME MATCHES "OS390")
+      if(CMAKE_${lang}_COMPILER_ID MATCHES "Clang")
+        string(APPEND COMPILE_DEFINITIONS " -fzos-le-char-mode=ascii")
+      elseif(CMAKE_${lang}_COMPILER_ID MATCHES "zOS")
+        string(APPEND COMPILE_DEFINITIONS " -qascii")
+      endif()
+    endif()
+
     __TestCompiler_setTryCompileTargetType()
 
     # Avoid failing ABI detection on warnings.
diff --git a/Modules/CMakeDetermineSystem.cmake b/Modules/CMakeDetermineSystem.cmake
index b330ed9d50..d614a844bd 100644
--- a/Modules/CMakeDetermineSystem.cmake
+++ b/Modules/CMakeDetermineSystem.cmake
@@ -51,7 +51,7 @@ if(CMAKE_HOST_UNIX)
         OUTPUT_STRIP_TRAILING_WHITESPACE
         ERROR_QUIET)
     endif()
-    if(CMAKE_HOST_SYSTEM_NAME MATCHES "Linux|CYGWIN.*|MSYS.*|^GNU$|Android")
+    if(CMAKE_HOST_SYSTEM_NAME MATCHES "Linux|CYGWIN.*|MSYS.*|^GNU$|Android|OS/390")
       execute_process(COMMAND ${CMAKE_UNAME} -m
         OUTPUT_VARIABLE CMAKE_HOST_SYSTEM_PROCESSOR
         RESULT_VARIABLE val
diff --git a/Modules/CMakeFindBinUtils.cmake b/Modules/CMakeFindBinUtils.cmake
index dc28f128d5..e9d175cb95 100644
--- a/Modules/CMakeFindBinUtils.cmake
+++ b/Modules/CMakeFindBinUtils.cmake
@@ -174,7 +174,7 @@ else()
   set(_CMAKE_TAPI_NAMES "tapi")
 
   # Prepend toolchain-specific names.
-  if("${CMAKE_${_CMAKE_PROCESSING_LANGUAGE}_COMPILER_ID}" STREQUAL Clang)
+  if("${CMAKE_${_CMAKE_PROCESSING_LANGUAGE}_COMPILER_ID}" STREQUAL Clang AND NOT CMAKE_SYSTEM_NAME MATCHES "OS390")
     if("x${CMAKE_${_CMAKE_PROCESSING_LANGUAGE}_SIMULATE_ID}" STREQUAL "xMSVC")
       list(PREPEND _CMAKE_LINKER_NAMES "lld-link")
     elseif(NOT APPLE)
diff --git a/Modules/CMakePlatformId.h.in b/Modules/CMakePlatformId.h.in
index fd0367e489..ea839592be 100644
--- a/Modules/CMakePlatformId.h.in
+++ b/Modules/CMakePlatformId.h.in
@@ -35,6 +35,9 @@
 #elif defined(_AIX) || defined(__AIX) || defined(__AIX__) || defined(__aix) || defined(__aix__)
 # define PLATFORM_ID "AIX"
 
+#elif defined(__MVS__)
+# define PLATFORM_ID "zOS"
+
 #elif defined(__hpux) || defined(__hpux__)
 # define PLATFORM_ID "HP-UX"
 
@@ -195,6 +198,9 @@
 # elif defined(__ICCSTM8__)
 #  define ARCHITECTURE_ID "STM8"
 
+# elif defined(__MVS__) && defined(__ARCH__)
+#  define ARCHITECTURE_ID "ARCH" STRINGIFY(__ARCH__)
+
 # else /* unknown architecture */
 #  define ARCHITECTURE_ID ""
 # endif
diff --git a/Modules/CheckTypeSize.cmake b/Modules/CheckTypeSize.cmake
index ee54d92e2e..17b3b367f4 100644
--- a/Modules/CheckTypeSize.cmake
+++ b/Modules/CheckTypeSize.cmake
@@ -153,6 +153,16 @@ function(__check_type_size_impl type var map builtin language)
   set(bin ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CheckTypeSize/${var}.bin)
   file(READ ${__check_type_size_dir}/CheckTypeSize.c.in src_content)
   string(CONFIGURE "${src_content}" src_content @ONLY)
+  # Add Flag for z/OS compilers for ascii encoding of string literals.
+  if(CMAKE_SYSTEM_NAME MATCHES "OS390")
+    # Only need to modify CMAKE_C_FLAGS as CheckTypeSize.c.in is in C
+    set(CMAKE_C_FLAGS_SAVE ${CMAKE_C_FLAGS})
+    if(CMAKE_C_COMPILER_ID MATCHES "Clang")
+      string(APPEND CMAKE_C_FLAGS " -fzos-le-char-mode=ascii")
+    elseif(CMAKE_C_COMPILER_ID MATCHES "zOS")
+      string(APPEND CMAKE_C_FLAGS " -qASCII")
+    endif()
+  endif()
   try_compile(HAVE_${var} SOURCE_FROM_VAR "${src}" src_content
     COMPILE_DEFINITIONS ${CMAKE_REQUIRED_DEFINITIONS}
     LINK_OPTIONS ${CMAKE_REQUIRED_LINK_OPTIONS}
@@ -165,6 +175,11 @@ function(__check_type_size_impl type var map builtin language)
     )
   unset(_CTS_LINK_DIRECTORIES)
 
+  # Restore flags for z/OS compilers.
+  if(CMAKE_SYSTEM_NAME MATCHES "OS390")
+    set(CMAKE_C_FLAGS ${CMAKE_C_FLAGS_SAVE})
+  endif()
+
   if(HAVE_${var})
     # The check compiled.  Load information from the binary.
     file(STRINGS ${bin} strings LIMIT_COUNT 10 REGEX "INFO:size")
diff --git a/Modules/Compiler/Clang.cmake b/Modules/Compiler/Clang.cmake
index e85cdb2a18..732234a672 100644
--- a/Modules/Compiler/Clang.cmake
+++ b/Modules/Compiler/Clang.cmake
@@ -53,8 +53,13 @@ else()
       endif()
     endif()
 
-    set(_CMAKE_${lang}_IPO_SUPPORTED_BY_CMAKE YES)
-    set(_CMAKE_${lang}_IPO_MAY_BE_SUPPORTED_BY_COMPILER YES)
+    if(ZOS)
+      set(_CMAKE_${lang}_IPO_SUPPORTED_BY_CMAKE NO)
+      set(_CMAKE_${lang}_IPO_MAY_BE_SUPPORTED_BY_COMPILER NO)
+    else()
+      set(_CMAKE_${lang}_IPO_SUPPORTED_BY_CMAKE YES)
+      set(_CMAKE_${lang}_IPO_MAY_BE_SUPPORTED_BY_COMPILER YES)
+    endif()
 
     string(COMPARE EQUAL "${CMAKE_${lang}_COMPILER_ID}" "AppleClang" __is_apple_clang)
     string(COMPARE EQUAL "${CMAKE_${lang}_COMPILER_ID}" "FujitsuClang" __is_fujitsu_clang)
diff --git a/Modules/Compiler/IBMClang-CXX.cmake b/Modules/Compiler/IBMClang-CXX.cmake
index ec97381bd7..8c780dce03 100644
--- a/Modules/Compiler/IBMClang-CXX.cmake
+++ b/Modules/Compiler/IBMClang-CXX.cmake
@@ -28,7 +28,8 @@ set(CMAKE_CXX14_EXTENSION_COMPILE_OPTION "-std=gnu++14")
 
 set(CMAKE_CXX_STANDARD_LATEST 14)
 
-if (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 17.1.0)
+if (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 17.1.0 OR
+    (CMAKE_SYSTEM_NAME STREQUAL "OS390" AND CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 1.1.0))
   set(CMAKE_CXX17_STANDARD_COMPILE_OPTION  "-std=c++17")
   set(CMAKE_CXX17_EXTENSION_COMPILE_OPTION "-std=gnu++17")
   set(CMAKE_CXX20_STANDARD_COMPILE_OPTION  "-std=c++20")
@@ -38,7 +39,11 @@ if (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 17.1.0)
   set(CMAKE_CXX_STANDARD_LATEST 23)
 endif()
 
-__compiler_check_default_language_standard(CXX 17.1.0 17)
+if (CMAKE_SYSTEM_NAME STREQUAL "OS390")
+  __compiler_check_default_language_standard(CXX 1.1.0 14)
+else()
+  __compiler_check_default_language_standard(CXX 17.1.0 17)
+endif()
 
 set(CMAKE_CXX_COMPILE_OBJECT
   "<CMAKE_CXX_COMPILER> -x c++ <DEFINES> <INCLUDES> <FLAGS> -o <OBJECT> -c <SOURCE>")
diff --git a/Modules/FindThreads.cmake b/Modules/FindThreads.cmake
index 0fa6ae7661..170acd2f21 100644
--- a/Modules/FindThreads.cmake
+++ b/Modules/FindThreads.cmake
@@ -68,6 +68,10 @@ endif()
 
 # simple pthread test code
 set(PTHREAD_C_CXX_TEST_SOURCE [====[
+#ifdef __MVS__
+#define _UNIX03_THREADS
+#include <stddef.h>
+#endif
 #include <pthread.h>
 
 static void* test_func(void* data)
@@ -189,6 +193,11 @@ if(CMAKE_SYSTEM_NAME MATCHES "Windows")
   set(Threads_FOUND TRUE)
 endif()
 
+if(CMAKE_SYSTEM_NAME MATCHES "OS390")
+  set(CMAKE_USE_ZOS_THREADS_INIT 1)
+  set(Threads_FOUND TRUE)
+endif()
+
 if(CMAKE_USE_PTHREADS_INIT)
   if(CMAKE_SYSTEM_NAME MATCHES "HP-UX")
     # Use libcma if it exists and can be used.  It provides more
diff --git a/README.rst b/README.rst
index 8a471db0e9..955cb17ec6 100644
--- a/README.rst
+++ b/README.rst
@@ -39,6 +39,7 @@ Supported Platforms
 * OpenBSD
 * Solaris
 * AIX
+* z/OS
 
 Other UNIX-like operating systems may work too out of the box, if not
 it should not be a major problem to port CMake to this platform.
diff --git a/Source/CMakeVersion.cmake b/Source/CMakeVersion.cmake
index 5755e5a023..e33e436e53 100644
--- a/Source/CMakeVersion.cmake
+++ b/Source/CMakeVersion.cmake
@@ -80,5 +80,9 @@ else()
   set(CMake_VERSION_SUFFIX "")
 endif()
 if(CMake_VERSION_IS_DIRTY)
-  string(APPEND CMake_VERSION "-dirty")
+  if(CMAKE_SYSTEM_NAME STREQUAL "OS390")
+    string(APPEND CMake_VERSION "-zos")
+  else()
+    string(APPEND CMake_VERSION "-dirty")
+  endif()
 endif()
diff --git a/Source/CursesDialog/form/form.h b/Source/CursesDialog/form/form.h
index b590c97852..7e36502d6c 100644
--- a/Source/CursesDialog/form/form.h
+++ b/Source/CursesDialog/form/form.h
@@ -50,7 +50,17 @@
 #    define _XOPEN_SOURCE_EXTENDED
 #   endif
 #  endif
+#  if defined(__MVS__)
+#   include <stdbool.h>
+#   define __bool_
+#  endif
+#  if defined(__MVS__) && defined(__cplusplus)
+extern "C" {
+#  endif
 #  include <curses.h>
+#  if defined(__MVS__) && defined(__cplusplus)
+}
+#  endif
 #  if defined(__hpux) && !defined(HAVE__XOPEN_SOURCE_EXTENDED)
 #   undef _XOPEN_SOURCE_EXTENDED
 #  endif
diff --git a/Source/CursesDialog/form/frm_driver.c b/Source/CursesDialog/form/frm_driver.c
index 9cbb12ff98..d8e1c3572b 100644
--- a/Source/CursesDialog/form/frm_driver.c
+++ b/Source/CursesDialog/form/frm_driver.c
@@ -865,7 +865,7 @@ static int Display_Or_Erase_Field(FIELD * field, bool bEraseFlag)
         Set_Field_Window_Attributes(field,win);
       else
         {
-#if defined(__LSB_VERSION__)
+#if defined(__LSB_VERSION__) || defined(__MVS__)
         /* getattrs() would be handy, but it is not part of LSB 4.0 */
         attr_t fwinAttrs;
         short  fwinPair;
diff --git a/Source/cmGeneratorTarget.cxx b/Source/cmGeneratorTarget.cxx
index fb92771b03..566076ab3d 100644
--- a/Source/cmGeneratorTarget.cxx
+++ b/Source/cmGeneratorTarget.cxx
@@ -261,7 +261,8 @@ const char* cmGeneratorTarget::GetOutputTargetType(
         switch (artifact) {
           case cmStateEnums::RuntimeBinaryArtifact:
             // A DLL shared library is treated as a runtime target.
-            return "RUNTIME";
+            // On z/OS it's treated as library target.
+            return this->Makefile->IsOn("OS390") ? "LIBRARY" : "RUNTIME";
           case cmStateEnums::ImportLibraryArtifact:
             // A DLL import library is treated as an archive target.
             return "ARCHIVE";
diff --git a/Source/cmInstallCommand.cxx b/Source/cmInstallCommand.cxx
index 9a797a7732..5b95a06cd5 100644
--- a/Source/cmInstallCommand.cxx
+++ b/Source/cmInstallCommand.cxx
@@ -137,6 +137,7 @@ public:
     const cmInstallCommandArguments* args) const;
   std::string GetManDestination(const cmInstallCommandArguments* args) const;
   std::string GetDocDestination(const cmInstallCommandArguments* args) const;
+  std::string GetImportLibrarySuffix(const cmInstallCommandArguments* args) const;
   std::string GetProgramExecutablesDestination(
     const cmInstallCommandArguments* args) const;
   std::string GetDestinationForType(const cmInstallCommandArguments* args,
@@ -699,6 +700,9 @@ bool HandleTargetsMode(std::vector<std::string> const& args,
     return true;
   }
 
+  // Check whether this is a z/OS platform.
+  bool zos_platform = helper.GetImportLibrarySuffix(nullptr) == ".x";
+
   for (std::string const& tgt : targetList) {
 
     if (helper.Makefile->IsAlias(tgt)) {
@@ -843,19 +847,28 @@ bool HandleTargetsMode(std::vector<std::string> const& args,
               target, archiveArgs, true, helper.Makefile->GetBacktrace());
             artifactsSpecified = true;
           }
-          if (!runtimeArgs.GetDestination().empty()) {
+          if (!runtimeArgs.GetDestination().empty() && !zos_platform) {
             // The DLL uses the RUNTIME properties.
             runtimeGenerator = CreateInstallTargetGenerator(
               target, runtimeArgs, false, helper.Makefile->GetBacktrace());
             artifactsSpecified = true;
           }
-          if (!archiveGenerator && !runtimeGenerator) {
+          if (!libraryArgs.GetDestination().empty() && zos_platform) {
+            // The DLL uses the LIBRARY properties.
+            libraryGenerator = CreateInstallTargetGenerator(
+              target, libraryArgs, true, helper.Makefile->GetBacktrace());
+            artifactsSpecified = true;
+          }
+          if (!archiveGenerator && !runtimeGenerator && !libraryGenerator) {
             archiveGenerator = CreateInstallTargetGenerator(
               target, archiveArgs, true, helper.Makefile->GetBacktrace(),
               helper.GetArchiveDestination(nullptr));
             runtimeGenerator = CreateInstallTargetGenerator(
               target, runtimeArgs, false, helper.Makefile->GetBacktrace(),
               helper.GetRuntimeDestination(nullptr));
+            libraryGenerator = CreateInstallTargetGenerator(
+              target, libraryArgs, true, helper.Makefile->GetBacktrace(),
+              helper.GetLibraryDestination(nullptr));
           }
           if (runtimeDependencySet && runtimeGenerator) {
             runtimeDependencySet->AddLibrary(runtimeGenerator.get());
@@ -2646,6 +2659,11 @@ std::string Helper::GetProgramExecutablesDestination(
   return this->GetDestination(args, "CMAKE_INSTALL_LIBEXECDIR", "libexec");
 }
 
+std::string Helper::GetImportLibrarySuffix(const cmInstallCommandArguments* args) const
+{
+  return this->Makefile->GetSafeDefinition("CMAKE_IMPORT_LIBRARY_SUFFIX");
+}
+
 std::string Helper::GetDestinationForType(
   const cmInstallCommandArguments* args, const std::string& type) const
 {
diff --git a/Source/cmLoadCommandCommand.cxx b/Source/cmLoadCommandCommand.cxx
index 81edea5b61..0b2f23fc29 100644
--- a/Source/cmLoadCommandCommand.cxx
+++ b/Source/cmLoadCommandCommand.cxx
@@ -1,7 +1,7 @@
 /* Distributed under the OSI-approved BSD 3-Clause License.  See accompanying
    file Copyright.txt or https://cmake.org/licensing for details.  */
 
-#if !defined(_WIN32) && !defined(__sun) && !defined(__OpenBSD__)
+#if !defined(_WIN32) && !defined(__sun) && !defined(__OpenBSD__) && !defined(__MVS__)
 // POSIX APIs are needed
 // NOLINTNEXTLINE(bugprone-reserved-identifier)
 #  define _POSIX_C_SOURCE 200809L
diff --git a/Source/cmStandardLexer.h b/Source/cmStandardLexer.h
index 27225280d6..77ba6c9067 100644
--- a/Source/cmStandardLexer.h
+++ b/Source/cmStandardLexer.h
@@ -8,7 +8,7 @@
 #  define _XOPEN_SOURCE 600
 #endif
 #if !defined(_POSIX_C_SOURCE) && !defined(_WIN32) && !defined(__sun) &&       \
-  !defined(__OpenBSD__)
+  !defined(__OpenBSD__) && !defined(__MVS__)
 /* POSIX APIs are needed */
 // NOLINTNEXTLINE(bugprone-reserved-identifier)
 #  define _POSIX_C_SOURCE 200809L
diff --git a/Source/cmSystemTools.cxx b/Source/cmSystemTools.cxx
index 5ad0439c9e..5e1769e43c 100644
--- a/Source/cmSystemTools.cxx
+++ b/Source/cmSystemTools.cxx
@@ -1,7 +1,7 @@
 /* Distributed under the OSI-approved BSD 3-Clause License.  See accompanying
    file Copyright.txt or https://cmake.org/licensing for details.  */
 
-#if !defined(_WIN32) && !defined(__sun) && !defined(__OpenBSD__)
+#if !defined(_WIN32) && !defined(__sun) && !defined(__OpenBSD__) && !defined(__MVS__)
 // POSIX APIs are needed
 // NOLINTNEXTLINE(bugprone-reserved-identifier)
 #  define _POSIX_C_SOURCE 200809L
@@ -3773,6 +3773,14 @@ cm::string_view cmSystemTools::GetSystemName()
     if (systemName.find("kFreeBSD") != cm::string_view::npos) {
       systemName = "kFreeBSD";
     }
+
+    // fix for OS/390, remove the /
+    static const cmsys::RegularExpression os390Regex("OS.390");
+    cmsys::RegularExpressionMatch match390;
+    if (os390Regex.find(uts_name.sysname, match390)) {
+      systemName = "OS390";
+    }
+
     return systemName;
   }
   return "";
diff --git a/Source/cmTimestamp.cxx b/Source/cmTimestamp.cxx
index 4d8bc027d8..e731771c71 100644
--- a/Source/cmTimestamp.cxx
+++ b/Source/cmTimestamp.cxx
@@ -1,7 +1,7 @@
 /* Distributed under the OSI-approved BSD 3-Clause License.  See accompanying
    file Copyright.txt or https://cmake.org/licensing for details.  */
 
-#if !defined(_WIN32) && !defined(__sun) && !defined(__OpenBSD__)
+#if !defined(_WIN32) && !defined(__sun) && !defined(__OpenBSD__) && !defined(__MVS__)
 // POSIX APIs are needed
 // NOLINTNEXTLINE(bugprone-reserved-identifier)
 #  define _POSIX_C_SOURCE 200809L
diff --git a/Source/cm_fileno.cxx b/Source/cm_fileno.cxx
index a40c5ca676..242f524e58 100644
--- a/Source/cm_fileno.cxx
+++ b/Source/cm_fileno.cxx
@@ -1,7 +1,7 @@
 /* Distributed under the OSI-approved BSD 3-Clause License.  See accompanying
    file Copyright.txt or https://cmake.org/licensing for details.  */
 #if !defined(_POSIX_C_SOURCE) && !defined(_WIN32) && !defined(__sun) &&       \
-  !defined(__OpenBSD__)
+  !defined(__OpenBSD__) && !defined(__MVS__)
 /* POSIX APIs are needed */
 // NOLINTNEXTLINE(bugprone-reserved-identifier)
 #  define _POSIX_C_SOURCE 200809L
diff --git a/Source/kwsys/ProcessUNIX.c b/Source/kwsys/ProcessUNIX.c
index efe22334f2..5c548e105b 100644
--- a/Source/kwsys/ProcessUNIX.c
+++ b/Source/kwsys/ProcessUNIX.c
@@ -2503,7 +2503,7 @@ static pid_t kwsysProcessFork(kwsysProcess* cp,
   defined(__OpenBSD__) || defined(__GLIBC__) || defined(__GNU__)
 #  define KWSYSPE_PS_COMMAND "ps axo pid,ppid"
 #  define KWSYSPE_PS_FORMAT "%d %d\n"
-#elif defined(__sun) && (defined(__SVR4) || defined(__svr4__)) /* Solaris */
+#elif defined(__MVS__) || (defined(__sun) && (defined(__SVR4) || defined(__svr4__))) /* Solaris */
 #  define KWSYSPE_PS_COMMAND "ps -e -o pid,ppid"
 #  define KWSYSPE_PS_FORMAT "%d %d\n"
 #elif defined(__hpux) || defined(__sun__) || defined(__sgi) ||                \
diff --git a/Source/kwsys/SystemTools.cxx b/Source/kwsys/SystemTools.cxx
index 6cc103df51..ef82bd543f 100644
--- a/Source/kwsys/SystemTools.cxx
+++ b/Source/kwsys/SystemTools.cxx
@@ -18,6 +18,10 @@
 #  define _WIN32_WINNT _WIN32_WINNT_VISTA
 #endif
 
+#if defined(__MVS__)
+#define _OPEN_SYS_FILE_EXT 1
+#endif
+
 #include "kwsysPrivate.h"
 #include KWSYS_HEADER(RegularExpression.hxx)
 #include KWSYS_HEADER(SystemTools.hxx)
@@ -85,7 +89,9 @@
 #  include <unistd.h>
 #  include <utime.h>
 #  ifndef __VMS
-#    include <sys/param.h>
+#    ifndef __MVS__
+#      include <sys/param.h>
+#    endif
 #    include <termios.h>
 #  endif
 #  include <csignal> /* sigprocmask */
@@ -2541,6 +2547,12 @@ SystemTools::CopyStatus SystemTools::CopyFileContentBlockwise(
   fin.close();
   fout.close();
 
+#if defined(__MVS__)
+  if (!SystemTools::CopyFileAttributes(source, destination)) {
+    return CopyStatus{ Status::POSIX_errno(), CopyStatus::DestPath };
+    }
+#endif
+
   if (!fout) {
     return CopyStatus{ Status::POSIX_errno(), CopyStatus::DestPath };
   }
@@ -2586,6 +2598,12 @@ SystemTools::CopyStatus SystemTools::CloneFileContent(
   close(in);
   close(out);
 
+#if defined(__MVS__)
+  if (!SystemTools::CopyFileAttributes(source, destination)) {
+    return CopyStatus{ Status::POSIX_errno(), CopyStatus::DestPath };
+    }
+#endif
+
   return status;
 #elif defined(__APPLE__) &&                                                   \
   defined(KWSYS_SYSTEMTOOLS_HAVE_MACOS_COPYFILE_CLONE)
@@ -2624,6 +2642,39 @@ SystemTools::CopyStatus SystemTools::CloneFileContent(
 #endif
 }
 
+#if defined(__MVS__)
+bool SystemTools::CopyFileAttributes(const std::string& source, const std::string& destination)
+{
+  struct stat sourceAttributes;
+  if ( stat(source.c_str(),&sourceAttributes) )
+    {
+    return false;
+    }
+
+  attrib_t destinationAttributes;
+  memset(&destinationAttributes, 0, sizeof(destinationAttributes));
+  destinationAttributes.att_filetagchg = 1;
+
+  // If source file is text, tag output file as IBM-819 text. Otherwise copy original tagging.
+  if ( sourceAttributes.st_tag.ft_txtflag == 1 )
+    {
+    destinationAttributes.att_filetag.ft_ccsid = 819;
+    destinationAttributes.att_filetag.ft_txtflag = 1;
+    }
+  else
+    {
+    destinationAttributes.att_filetag.ft_ccsid = sourceAttributes.st_tag.ft_ccsid;
+    destinationAttributes.att_filetag.ft_txtflag = 0;
+    }
+
+  if ( __chattr((char*)destination.c_str(), &destinationAttributes, sizeof(destinationAttributes)) )
+    {
+    return false;
+    }
+  return true;
+}
+#endif
+
 /**
  * Copy a file named by "source" to the file named by "destination".
  */
@@ -2674,6 +2725,7 @@ SystemTools::CopyStatus SystemTools::CopyFileAlways(
     if (!status.IsSuccess()) {
       status = SystemTools::CopyFileContentBlockwise(source, real_destination);
     }
+
     if (!status.IsSuccess()) {
       return status;
     }
diff --git a/Source/kwsys/SystemTools.hxx.in b/Source/kwsys/SystemTools.hxx.in
index 294ffca326..3d5cd3a28b 100644
--- a/Source/kwsys/SystemTools.hxx.in
+++ b/Source/kwsys/SystemTools.hxx.in
@@ -667,6 +667,13 @@ public:
    */
   static bool SameFile(const std::string& file1, const std::string& file2);
 
+#if defined(__MVS__)
+  /**
+   * Copy file attributes.
+   */
+  static bool CopyFileAttributes(const std::string& source, const std::string& destination);
+#endif
+
   /**
    * Copy a file.
    */
diff --git a/Utilities/cmcurl/include/curl/system.h b/Utilities/cmcurl/include/curl/system.h
index e5be256845..1fa376b67a 100644
--- a/Utilities/cmcurl/include/curl/system.h
+++ b/Utilities/cmcurl/include/curl/system.h
@@ -439,7 +439,6 @@
   typedef CURL_TYPEOF_CURL_SOCKLEN_T curl_socklen_t;
 #endif
 
-/* Data type definition of curl_off_t. */
 
 #ifdef CURL_TYPEOF_CURL_OFF_T
   typedef CURL_TYPEOF_CURL_OFF_T curl_off_t;
diff --git a/Utilities/cmcurl/lib/curl_setup.h b/Utilities/cmcurl/lib/curl_setup.h
index 01b9015fcb..bfd6208919 100644
--- a/Utilities/cmcurl/lib/curl_setup.h
+++ b/Utilities/cmcurl/lib/curl_setup.h
@@ -568,6 +568,10 @@
 #  endif
 #endif
 
+#ifdef __MVS__
+#define SIZEOF_CURL_OFF_T 8
+#endif
+
 #if (SIZEOF_CURL_OFF_T < 8)
 #error "too small curl_off_t"
 #else
diff --git a/Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c b/Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
index eea8259fff..e844d3cac2 100644
--- a/Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
+++ b/Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
@@ -1541,7 +1541,7 @@ set_statvfs_transfer_size(struct filesystem *fs, const struct statvfs *sfs)
 }
 #endif
 
-#if defined(HAVE_STRUCT_STATFS)
+#if defined(HAVE_STRUCT_STATFS) && !defined(__MVS__)
 static inline __LA_UNUSED void
 set_statfs_transfer_size(struct filesystem *fs, const struct statfs *sfs)
 {
@@ -1686,7 +1686,7 @@ setup_current_filesystem(struct archive_read_disk *a)
 	return (ARCHIVE_OK);
 }
 
-#elif (defined(HAVE_STATVFS) || defined(HAVE_FSTATVFS)) && defined(ST_LOCAL)
+#elif (defined(HAVE_STATVFS) || defined(HAVE_FSTATVFS)) && defined(ST_LOCAL) && !defined(__MVS_)
 
 /*
  * Gather current filesystem properties on NetBSD
diff --git a/Utilities/cmlibarchive/libarchive/filter_fork_posix.c b/Utilities/cmlibarchive/libarchive/filter_fork_posix.c
index c895c08e59..c558fff9a7 100644
--- a/Utilities/cmlibarchive/libarchive/filter_fork_posix.c
+++ b/Utilities/cmlibarchive/libarchive/filter_fork_posix.c
@@ -28,7 +28,7 @@
 
 /* This capability is only available on POSIX systems. */
 #if defined(HAVE_PIPE) && defined(HAVE_FCNTL) && \
-    (defined(HAVE_FORK) || defined(HAVE_VFORK) || defined(HAVE_POSIX_SPAWNP))
+    (defined(HAVE_FORK) || defined(HAVE_VFORK) || defined(HAVE_POSIX_SPAWNP)) || defined(__MVS__)
 
 #if defined(HAVE_SYS_TYPES_H)
 #  include <sys/types.h>
diff --git a/Utilities/cmlibrhash/librhash/rhash.c b/Utilities/cmlibrhash/librhash/rhash.c
index 4e60c213bf..847451c776 100644
--- a/Utilities/cmlibrhash/librhash/rhash.c
+++ b/Utilities/cmlibrhash/librhash/rhash.c
@@ -527,7 +527,7 @@ RHASH_API int rhash_file_update(rhash ctx, FILE* fd)
 #ifdef _WIN32
 # define FOPEN_MODE "rbS"
 #else
-# define FOPEN_MODE "rb"
+# define FOPEN_MODE "r"
 #endif
 
 RHASH_API int rhash_file(unsigned hash_id, const char* filepath, unsigned char* result)
diff --git a/Utilities/cmlibrhash/librhash/util.h b/Utilities/cmlibrhash/librhash/util.h
index 4da1be69fa..1caff2e632 100644
--- a/Utilities/cmlibrhash/librhash/util.h
+++ b/Utilities/cmlibrhash/librhash/util.h
@@ -13,7 +13,7 @@ extern "C" {
 
 #if (defined(__GNUC__) && __GNUC__ >= 4 && (__GNUC__ > 4 || __GNUC_MINOR__ >= 1) \
 	&& defined(__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4)) \
-	|| (defined(__INTEL_COMPILER) && !defined(_WIN32))
+	|| (defined(__INTEL_COMPILER) && !defined(_WIN32)) && !defined(__MVS__)
 /* atomic operations are defined by ICC and GCC >= 4.1, but by the later one supposedly not for ARM */
 /* note: ICC on ia64 platform possibly require ia64intrin.h, need testing */
 # define atomic_compare_and_swap(ptr, oldval, newval) __sync_val_compare_and_swap(ptr, oldval, newval)
@@ -46,7 +46,7 @@ extern "C" {
 #elif !defined(NO_STDC_ALIGNED_ALLOC) && (__STDC_VERSION__ >= 201112L || defined(_ISOC11_SOURCE)) \
 	&& !(defined(__GLIBC__) && (__GLIBC__ < 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ < 16))) \
 	&& !(defined(__ibmxl__) && defined(__clang__) && defined(__linux__)) \
-	&& !defined(__APPLE__) && !defined(__HAIKU__) && !defined(__sun) \
+	&& !defined(__APPLE__) && !defined(__HAIKU__) && !defined(__sun) && !defined(__MVS__) \
 	&& (!defined(__ANDROID_API__) || __ANDROID_API__ >= 28)
 
 # define HAS_STDC_ALIGNED_ALLOC
@@ -57,7 +57,7 @@ extern "C" {
 
 # include "ustd.h" /* for _POSIX_VERSION macro */
 
-# if !defined(NO_POSIX_ALIGNED_ALLOC) && (_POSIX_VERSION >= 200112L || _XOPEN_SOURCE >= 600)
+# if !defined(NO_POSIX_ALIGNED_ALLOC) && (_POSIX_VERSION >= 200112L || _XOPEN_SOURCE >= 600) && !defined(__MVS__)
 
 #  define HAS_POSIX_ALIGNED_ALLOC
 #  define rhash_aligned_alloc(alignment, size) rhash_px_aalloc((alignment), ALIGN_SIZE_BY(size, sizeof(void*)))
diff --git a/Utilities/cmlibuv/CMakeLists.txt b/Utilities/cmlibuv/CMakeLists.txt
index a0b161b5c0..052b28707b 100644
--- a/Utilities/cmlibuv/CMakeLists.txt
+++ b/Utilities/cmlibuv/CMakeLists.txt
@@ -139,6 +139,33 @@ if(CMAKE_SYSTEM_NAME STREQUAL "AIX")
     )
 endif()
 
+if(CMAKE_SYSTEM_NAME STREQUAL "OS390")
+  list(APPEND uv_headers
+    include/uv/os390.h
+    )
+  enable_language(CXX)
+  list(APPEND uv_defines PATH_MAX=1024)
+  list(APPEND uv_defines _AE_BIMODAL)
+  list(APPEND uv_defines _ALL_SOURCE)
+  list(APPEND uv_defines _ISOC99_SOURCE)
+  list(APPEND uv_defines _LARGE_TIME_API)
+  list(APPEND uv_defines _OPEN_MSGQ_EXT)
+  list(APPEND uv_defines _OPEN_SYS_FILE_EXT)
+  list(APPEND uv_defines _OPEN_SYS_IF_EXT)
+  list(APPEND uv_defines _OPEN_SYS_SOCK_EXT3)
+  list(APPEND uv_defines _OPEN_SYS_SOCK_IPV6)
+  list(APPEND uv_defines _UNIX03_SOURCE)
+  list(APPEND uv_defines _UNIX03_THREADS)
+  list(APPEND uv_defines _UNIX03_WITHDRAWN)
+  list(APPEND uv_defines _XOPEN_SOURCE=600)
+  list(APPEND uv_defines _XOPEN_SOURCE_EXTENDED)
+  list(APPEND uv_sources
+       src/unix/pthread-fixes.c
+       src/unix/os390.c
+       src/unix/os390-syscalls.c
+       src/unix/os390-proctitle.c)
+endif()
+
 if(CMAKE_SYSTEM_NAME STREQUAL "OS400")
   list(APPEND uv_headers
     include/uv/posix.h
diff --git a/Utilities/cmlibuv/include/uv/posix.h b/Utilities/cmlibuv/include/uv/posix.h
index 9a96634db0..98248bff05 100644
--- a/Utilities/cmlibuv/include/uv/posix.h
+++ b/Utilities/cmlibuv/include/uv/posix.h
@@ -22,6 +22,10 @@
 #ifndef UV_POSIX_H
 #define UV_POSIX_H
 
+#ifdef __MVS__
+#define UV_PLATFORM_SEM_T long
+#endif
+
 #define UV_PLATFORM_LOOP_FIELDS                                               \
   struct pollfd* poll_fds;                                                    \
   size_t poll_fds_used;                                                       \
diff --git a/Utilities/cmlibuv/src/unix/core.c b/Utilities/cmlibuv/src/unix/core.c
index 83e8b611aa..3c4bd795a8 100644
--- a/Utilities/cmlibuv/src/unix/core.c
+++ b/Utilities/cmlibuv/src/unix/core.c
@@ -88,6 +88,7 @@ extern char** environ;
 
 #if defined(__MVS__)
 # include <sys/ioctl.h>
+# include <stdbool.h>
 # include "zos-sys-info.h"
 #endif
 
diff --git a/Utilities/cmlibuv/src/unix/os390-syscalls.c b/Utilities/cmlibuv/src/unix/os390-syscalls.c
index 5861aaaa20..c40b8d1775 100644
--- a/Utilities/cmlibuv/src/unix/os390-syscalls.c
+++ b/Utilities/cmlibuv/src/unix/os390-syscalls.c
@@ -137,11 +137,16 @@ static void maybe_resize(uv__os390_epoll* lst, unsigned int len) {
 
 
 void uv__os390_cleanup(void) {
+#ifdef ZOS_ENABLE_MSGQUEUE
   msgctl(uv_backend_fd(uv_default_loop()), IPC_RMID, NULL);
+#endif
 }
 
 
 static void init_message_queue(uv__os390_epoll* lst) {
+#ifndef ZOS_ENABLE_MSGQUEUE
+  lst->msg_queue = -1;
+#else
   struct {
     long int header;
     char body;
@@ -164,6 +169,7 @@ static void init_message_queue(uv__os390_epoll* lst) {
   /* Clean up the dummy message sent above */
   if (msgrcv(lst->msg_queue, &msg, sizeof(msg.body), 0, 0) != sizeof(msg.body))
     abort();
+#endif
 }
 
 
@@ -375,7 +381,9 @@ void epoll_queue_close(uv__os390_epoll* lst) {
   uv_mutex_unlock(&global_epoll_lock);
 
   /* Free resources */
+#ifdef ZOS_ENABLE_MSGQUEUE
   msgctl(lst->msg_queue, IPC_RMID, NULL);
+#endif
   lst->msg_queue = -1;
   uv__free(lst->items);
   lst->items = NULL;
diff --git a/Utilities/cmlibuv/src/unix/os390-syscalls.h b/Utilities/cmlibuv/src/unix/os390-syscalls.h
index 9f504171d8..d467af9c45 100644
--- a/Utilities/cmlibuv/src/unix/os390-syscalls.h
+++ b/Utilities/cmlibuv/src/unix/os390-syscalls.h
@@ -28,7 +28,6 @@
 #include <dirent.h>
 #include <poll.h>
 #include <pthread.h>
-#include "zos-base.h"
 
 #define EPOLL_CTL_ADD             1
 #define EPOLL_CTL_DEL             2
@@ -58,6 +57,7 @@ int epoll_wait(uv__os390_epoll* ep, struct epoll_event *events, int maxevents, i
 int epoll_file_close(int fd);
 
 /* utility functions */
+int nanosleep(const struct timespec* req, struct timespec* rem);
 int scandir(const char* maindir, struct dirent*** namelist,
             int (*filter)(const struct dirent *),
             int (*compar)(const struct dirent **,
diff --git a/Utilities/cmzlib/zconf.h b/Utilities/cmzlib/zconf.h
index 3247b08c50..4830c2cc61 100644
--- a/Utilities/cmzlib/zconf.h
+++ b/Utilities/cmzlib/zconf.h
@@ -525,21 +525,4 @@ typedef uLong FAR uLongf;
 #  endif
 #endif
 
-/* MVS linker does not support external names larger than 8 bytes */
-#if defined(__MVS__)
-  #pragma map(deflateInit_,"DEIN")
-  #pragma map(deflateInit2_,"DEIN2")
-  #pragma map(deflateEnd,"DEEND")
-  #pragma map(deflateBound,"DEBND")
-  #pragma map(inflateInit_,"ININ")
-  #pragma map(inflateInit2_,"ININ2")
-  #pragma map(inflateEnd,"INEND")
-  #pragma map(inflateSync,"INSY")
-  #pragma map(inflateSetDictionary,"INSEDI")
-  #pragma map(compressBound,"CMBND")
-  #pragma map(inflate_table,"INTABL")
-  #pragma map(inflate_fast,"INFA")
-  #pragma map(inflate_copyright,"INCOPY")
-#endif
-
 #endif /* ZCONF_H */
diff --git a/Utilities/cmzstd/lib/common/debug.h b/Utilities/cmzstd/lib/common/debug.h
index 0e9817ea6d..4e9d718eed 100644
--- a/Utilities/cmzstd/lib/common/debug.h
+++ b/Utilities/cmzstd/lib/common/debug.h
@@ -70,7 +70,10 @@ extern "C" {
 #  define ZSTD_DEPS_NEED_ASSERT
 #  include "zstd_deps.h"
 #else
-#  ifndef assert   /* assert may be already defined, due to prior #include <assert.h> */
+#  if !defined(assert) /* assert may be already defined, due to prior #include <assert.h> */
+#  ifdef __MVS__ 
+#    define __assert 1 /* Indicate to the headers that we have our own assert */
+#  endif
 #    define assert(condition) ((void)0)   /* disable assert (default) */
 #  endif
 #endif
diff --git a/Utilities/cmzstd/lib/common/zstd_trace.h b/Utilities/cmzstd/lib/common/zstd_trace.h
index da20534ebd..5bd36cd87a 100644
--- a/Utilities/cmzstd/lib/common/zstd_trace.h
+++ b/Utilities/cmzstd/lib/common/zstd_trace.h
@@ -29,7 +29,7 @@ extern "C" {
     defined(__GNUC__) && defined(__ELF__) && \
     (defined(__x86_64__) || defined(_M_X64) || defined(__i386__) || defined(_M_IX86) || defined(__aarch64__)) && \
     !defined(__APPLE__) && !defined(_WIN32) && !defined(__MINGW32__) && \
-    !defined(__CYGWIN__) && !defined(_AIX)
+    !defined(__CYGWIN__) && !defined(_AIX) && !defined(__MVS__)
 #  define ZSTD_HAVE_WEAK_SYMBOLS 1
 #else
 #  define ZSTD_HAVE_WEAK_SYMBOLS 0
diff --git a/bootstrap b/bootstrap
index 53358d547b..97e8a20779 100755
--- a/bootstrap
+++ b/bootstrap
@@ -172,6 +172,13 @@ else
   cmake_system_linux=false
 fi
 
+# Determine whether this is z/OS
+if echo "${cmake_system}" | grep OS/390 >/dev/null 2>&1; then
+  cmake_system_zos=true
+else
+  cmake_system_zos=false
+ fi
+
 # Determine whether this is a PA-RISC machine
 # This only works for Linux or HP-UX, not other PA-RISC OSs (BSD maybe?). Also
 # may falsely detect parisc on HP-UX m68k
@@ -683,6 +690,14 @@ else
     "
 fi
 
+if ${cmake_system_zos}; then
+  LIBUV_C_SOURCES="${LIBUV_C_SOURCES}\
+    src/unix/os390-syscalls.c \
+    src/unix/pthread-fixes.c \
+    src/unix/os390-proctitle.c \
+  "
+fi
+
 # Display CMake bootstrap usage
 cmake_usage()
 {
@@ -1022,6 +1037,7 @@ while test $# != 0; do
   CFLAGS=*) CFLAGS=`cmake_arg "$1"` ;;
   CXXFLAGS=*) CXXFLAGS=`cmake_arg "$1"` ;;
   LDFLAGS=*) LDFLAGS=`cmake_arg "$1"` ;;
+  LIBS=*) LIBS=`cmake_arg "$1"` ;;
   --) shift; break ;;
   *) die "Unknown option: $1" ;;
   esac
@@ -1179,6 +1195,7 @@ case "${cmake_system}" in
   *Darwin*) cmake_toolchains='Clang GNU' ;;
   *Linux*) cmake_toolchains='GNU Clang XL PGI PathScale' ;;
   *MINGW*) cmake_toolchains='GNU' ;;
+  *OS/390*) cmake_toolchains='Clang z/OS' ;;
 esac
 
 # Toolchain compiler name table.
@@ -1763,7 +1780,7 @@ if test "x${bootstrap_system_jsoncpp}" = "x"; then
   done
 fi
 
-libs=""
+libs="${LIBS}"
 
 uv_c_flags=""
 if ${cmake_system_mingw}; then
@@ -1799,6 +1816,13 @@ else
       uv_c_flags="${uv_c_flags} -D_XOPEN_SOURCE=700"
       libs="${libs} -lsocket"
       ;;
+    *OS/390*)
+      uv_c_flags="${uv_c_flags} -D_XOPEN_SOURCE=600 -DPATH_MAX=1024 -D_AE_BIMODAL -D_ALL_SOURCE \
+                  -D_ISOC99_SOURCE -D_LARGE_TIME_API -D_OPEN_MSGQ_EXT -D_OPEN_SYS_FILE_EXT -D_OPEN_SYS_IF_EXT \
+                  -D_OPEN_SYS_SOCK_EXT3 -D_OPEN_SYS_SOCK_IPV6 -D_UNIX03_SOURCE -D_UNIX03_THREADS -D_UNIX03_WITHDRAWN \
+                  -D_XOPEN_SOURCE_EXTENDED"
+      libs="${libs}"
+      ;;
   esac
 fi
 if test "x${bootstrap_system_libuv}" = "x"; then
@@ -2109,6 +2133,7 @@ export MAKE
 export CFLAGS
 export CXXFLAGS
 export LDFLAGS
+export LIBS
 
 # Run bootstrap CMake to configure real CMake
 cmake_options="-DCMAKE_BOOTSTRAP=1"
